{"version":3,"sources":["components/TodoList.js","components/Todo.js"],"names":["TodoList","props","console","log","items","map","todo","index","key","id","name","className","onClick","onDelete","Todo","locale","useContext","LocaleContext","inputRef","useRef","useState","inputStatus","setInputStatus","isMountedRef","useReducer","state","action","type","concat","payload","reverse","filter","todoList","dispatchTodo","useEffect","current","fetchData","a","axios","get","data","todos","push","addTodoHandler","event","preventDefault","value","post","deleteTodoHandler","delete","Error","text","onSubmit","ref","onChange","target","trim","useMemo"],"mappings":"2MAkBeA,EAjBE,SAAAC,GAEf,OADAC,QAAQC,IAAI,qBAEV,4BAEIF,EAAMG,MAAMC,KAAI,SAACC,EAAMC,GACrB,OACE,wBAAIC,IAAKF,EAAKG,IACXH,EAAKI,KADR,KAEM,4BAAQC,UAAU,SAASC,QAAS,kBAAMX,EAAMY,SAASP,EAAKG,MAA9D,gB,QCmGHK,UAvGF,SAAAb,GAAU,IACbc,EAAWC,qBAAWC,KAAtBF,OAGFG,EAAWC,mBAJG,EAKkBC,oBAAS,GAL3B,mBAKbC,EALa,KAKAC,EALA,KASdC,EAAeJ,kBAAO,GATR,EAqBaK,sBAVT,SAACC,EAAOC,GAC9B,OAAQA,EAAOC,MACb,IAAK,MACH,OAAOF,EAAMG,OAAOF,EAAOG,SAASC,UACtC,IAAK,SACH,OAAOL,EAAMM,QAAO,SAAAzB,GAAI,OAAIA,EAAKG,KAAOiB,EAAOG,WACjD,QACE,OAAOJ,KAGgD,IArBzC,mBAqBbO,EArBa,KAqBHC,EArBG,KAsBpBC,qBAAU,WAKR,OAJAX,EAAaY,SAAU,EAEvBjC,QAAQC,IAAI,sBACZiC,IACO,WAELlC,QAAQC,IAAI,mCACZoB,EAAaY,SAAU,KAExB,IAaH,IAAMC,EAAS,uCAAG,kCAAAC,EAAA,sEACOC,IAAMC,IAAI,0DADjB,OAGhB,IAAS9B,KAHO,SACR+B,EADQ,EACRA,KACFC,EAAQ,GACCD,EACbC,EAAMC,KAAK,CAAEjC,GAAIA,EAAIC,KAAM8B,EAAK/B,GAAIC,OAElCa,EAAaY,SAEfF,EAAa,CAAEN,KAAM,MAAOE,QAASY,IARvB,2CAAH,qDAmBTE,EAAc,uCAAG,WAAMC,GAAN,iBAAAP,EAAA,yDACrBnC,QAAQC,IAAI,aACZyC,EAAMC,kBACF3B,EAASiB,QAAQW,MAHA,gCAIIR,IAAMS,KAAK,yDAA0D,CAAErC,KAAMQ,EAASiB,QAAQW,QAJlG,gBAIXN,EAJW,EAIXA,KAMRP,EAAa,CAAEN,KAAM,MAAOE,QAAS,CAAEpB,GAAI+B,EAAK9B,KAAMA,KAAMQ,EAASiB,QAAQW,SAC7E5B,EAASiB,QAAQW,MAAQ,GAXN,2CAAH,sDAcdE,EAAiB,uCAAG,WAAOvC,GAAP,SAAA4B,EAAA,+EAEhBC,IAAMW,OAAN,4DAAkExC,EAAlE,UAFgB,OAGtBwB,EAAa,CAAEN,KAAM,SAAUE,QAASpB,IAHlB,qDAKhB,IAAIyC,MAAJ,MALgB,wDAAH,sDAQvB,OACE,kBAAC,WAAD,KACE,kDAAwBnC,EAAOoC,MAC/B,0BAAMC,SAAUT,GACd,6BACE,2BAAOhC,UAAWU,EAAY,GAAG,UAAWM,KAAK,OAAO0B,IAAKnC,EAAUoC,SAnCpD,SAAAV,GAEpBA,EAAMW,OAAOT,MAAMU,OAGtBlC,GAAe,GAFfA,GAAe,MAiCX,4BAAQX,UAAU,SAASgB,KAAK,UAAhC,SAIF8B,mBAAQ,kBAAK,kBAAC,EAAD,CAAUrD,MAAO4B,EAAUnB,SAAUmC,MAAsB,CAAChB","file":"static/js/8.3d02afdf.chunk.js","sourcesContent":["import React from 'react';\nconst TodoList = props => {\n  console.log(\"rendering list...\");\n  return (\n    <ul>\n      {\n        props.items.map((todo, index) => {\n          return (\n            <li key={todo.id}>\n              {todo.name}\n                | <button className=\"custom\" onClick={() => props.onDelete(todo.id)}>REMOVE</button>\n            </li>\n          )\n        })\n      }\n    </ul>\n  );\n};\nexport default TodoList;","import React, { Fragment, useState, useEffect, useRef, useReducer, useMemo } from 'react'\nimport axios from 'axios';\nimport TodoList from './TodoList';\nimport { useContext } from 'react';\nimport { LocaleContext } from '../context/LocaleContext';\n\nconst Todo = props => {\n  const { locale } = useContext(LocaleContext);\n  // const [readOnly, setReadOnly] = useState(false);\n  // const [todoName, setTodoName] = useState('');\n  const inputRef = useRef();\n  const [inputStatus, setInputStatus] = useState(true);\n  // const [todoList, setTodoList] = useState([]);\n  // const [submittedTodo, setSubmittedTodo] = useState(null);\n\n  const isMountedRef = useRef(false);\n\n  const todoListReducer = (state, action) => {\n    switch (action.type) {\n      case 'ADD':\n        return state.concat(action.payload).reverse();\n      case 'DELETE':\n        return state.filter(todo => todo.id !== action.payload);\n      default:\n        return state;\n    }\n  }\n  const [todoList, dispatchTodo] = useReducer(todoListReducer, []);\n  useEffect(() => {\n    isMountedRef.current = true;\n    // as we passed [] to useEffect it will run on component mount phase\n    console.log('init phase of TODO')\n    fetchData();\n    return () => {\n      // as we passed [] to useEffect it will run on component unmount\n      console.log('Destroy phase of Todo Component')\n      isMountedRef.current = false;\n    }\n  }, [])\n\n  // useEffect(() => {\n  //   if (submittedTodo) {\n  //     // we could directly call setTodoList &\n  //     //  concat todoList, but eslint will give warning about it\n  //     // as we depend on todoList directly but not adding it in deps array\n  //     setTodoList((list) => {\n  //       return list.concat(submittedTodo);\n  //     });\n  //   }\n  // }, [submittedTodo])\n\n  const fetchData = async () => {\n    const { data } = await axios.get('https://react-practice-45bd7.firebaseio.com/todos.json');\n    const todos = [];\n    for (let id in data) {\n      todos.push({ id: id, name: data[id].name });\n    }\n    if (isMountedRef.current) {\n      // setTodoList(todos);\n      dispatchTodo({ type: 'ADD', payload: todos });\n    }\n  }\n  const inputChangeHandler = event => {\n    // setTodoName(event.target.value);\n    if (!event.target.value.trim()) {\n      setInputStatus(false)\n    } else {\n      setInputStatus(true)\n    }\n  }\n  const addTodoHandler = async event => {\n    console.log('ADD TO DO')\n    event.preventDefault();\n    if (inputRef.current.value) {\n      const { data } = await axios.post('https://react-practice-45bd7.firebaseio.com/todos.json', { name: inputRef.current.value });\n      // setSubmittedTodo({ id: data.name, name: todoName });\n      // setTodoList((list) => {\n      //   list = list.concat({ id: data.name, name: todoName });\n      //   return list;\n      // });\n      dispatchTodo({ type: 'ADD', payload: { id: data.name, name: inputRef.current.value } });\n      inputRef.current.value = '';\n    }\n  }\n  const deleteTodoHandler = async (id) => {\n    try {\n      await axios.delete(`https://react-practice-45bd7.firebaseio.com/todos/${id}.json`);\n      dispatchTodo({ type: 'DELETE', payload: id });\n    } catch (error) {\n      throw new Error(error);\n    }\n  }\n  return (\n    <Fragment>\n      <h2>Currently Viewing: {locale.text}</h2>\n      <form onSubmit={addTodoHandler}>\n        <div>\n          <input className={inputStatus?'':'invalid'} type=\"text\" ref={inputRef} onChange={inputChangeHandler}/>\n          <button className=\"custom\" type=\"submit\" >Add</button>\n        </div>\n      </form>\n      {\n        useMemo(()=> <TodoList items={todoList} onDelete={deleteTodoHandler}/>, [todoList])\n      }\n      {/* {} */}\n    </Fragment>\n  )\n}\n\nexport default Todo;"],"sourceRoot":""}